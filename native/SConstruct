import os
import sys

lib_sources = [
	'libbtc/src/utils.c',
	'libbtc/src/base58.c',
	'libbtc/src/sha2.c',
	#'libbtc/src/net.c',
	'libbtc/src/vector.c',
	'libbtc/src/buffer.c',
	'libbtc/src/segwit_addr.c',
	'libbtc/src/protocol.c',
	'libbtc/src/logdb/logdb_rec.c',
	'libbtc/src/logdb/logdb_memdb_llist.c',
	'libbtc/src/logdb/logdb_memdb_rbtree.c',
	#'libbtc/src/logdb/test/logdb_tests.c',
	#'libbtc/src/logdb/test/tests_red_black_tree.c',
	'libbtc/src/logdb/logdb_core.c',
	'libbtc/src/logdb/red_black_tree.c',
	'libbtc/src/chainparams.c',
	'libbtc/src/commontools.c',
	'libbtc/src/tx.c',
	'libbtc/src/ctaes.c',
	'libbtc/src/ripemd160.c',
	'libbtc/src/serialize.c',
	'libbtc/src/secp256k1/contrib/lax_der_privatekey_parsing.c',
	'libbtc/src/secp256k1/contrib/lax_der_parsing.c',
#	'libbtc/src/secp256k1/src/bench_sign.c',
#	'libbtc/src/secp256k1/src/bench_verify.c',
#	'libbtc/src/secp256k1/src/java/org_bitcoin_Secp256k1Context.c',
#	'libbtc/src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.c',
#	'libbtc/src/secp256k1/src/bench_ecdh.c',
#	'libbtc/src/secp256k1/src/bench_schnorr_verify.c',
	'libbtc/src/secp256k1/src/secp256k1.c',
#	'libbtc/src/secp256k1/src/tests.c',
#	'libbtc/src/secp256k1/src/bench_internal.c',
#	'libbtc/src/secp256k1/src/bench_recover.c',
#	'libbtc/src/secp256k1/src/gen_context.c',
	'libbtc/src/aes256_cbc.c',
	'libbtc/src/memory.c',
	'libbtc/src/cstr.c',
	'libbtc/src/bip32.c',
	'libbtc/src/headersdb.c',
	'libbtc/src/wallet.c',
	'libbtc/src/random.c',
	'libbtc/src/ecc_key.c',
	'libbtc/src/txref_code.c',
	'libbtc/src/headersdb_file.c',
	'libbtc/src/script.c',
#	'libbtc/src/netspv.c',
	'libbtc/src/block.c',
#	'libbtc/src/tools/bitcoin-spv.c',
#	'libbtc/src/tools/bitcointool.c',
#	'libbtc/src/tools/bitcoin-txref.c',
#	'libbtc/src/tools/bitcoin-send-tx.c',
	'libbtc/src/ecc_libsecp256k1.c'
]

if sys.platform == "win32":
	env = Environment(tools = ['mingw'])
	env['ENV']['PATH'] = os.environ['PATH']
else:
	env = Environment()

env.Append(CPPFLAGS=["-D__LIBBTC_NET_H__", "-DHAVE_CONFIG_H", "-DWIN32"]) #, "-DUSE_NUM_NONE", "-DUSE_FIELD_10X26", "-DUSE_FIELD_INV_BUILTIN", "-DUSE_SCALAR_8X32", "-DUSE_SCALAR_INV_BUILTIN"])

if os.name == "posix":
    env.Append(CFLAGS=["-g", "-std=gnu99"])
env.Append(CPPPATH=["#libbtc/include", "#libbtc/src/secp256k1", "#libbtc/src/secp256k1/include", "#libbtc/src/logdb/include", "#", "-I/usr/local/opt/openssl/include"])

if os.name == "nt":
    env.Append(LIBS=['crypt32', 'Advapi32'])


btc_lib = env.Library("btc", lib_sources)

env.Program("test", ["libbtc_test/local_bitcoin.c", btc_lib])

